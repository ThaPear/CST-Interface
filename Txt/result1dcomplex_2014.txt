Home | Visual Basic (VBA) Language | 3D Simulation VBA | VBA Objects | Post Processing | Result 1D Complex

Result1DComplex Object
This object offers access and manipulation functions to complex 1D results. A Result1DComplex object can hold a number of points ( x, y ) where x is a real number and y is a complex number. Access to the points is possible by specifying an zero-based index.
A typical use case for a Result1DComplex object would be to load a previously calculated S-Parameter and do some post-processing on the data.

Initialization, File Operation

1D Complex to 1D Complex Operations

1D Complex to 1D Operations

Local Operations

General Settings

Examples

Initialization, File Operation


Methods

Xunit( string Unit )

Sets the Unit string for the Result1DComplex object.

 

Yunit( string Unit )

Sets the Unit string for the Result1DComplex object.

 

GetXunit string

Returns the Unit string of the Result1DComplex object.

 

GetYunit string

Returns the Unit string of the Result1DComplex object.

 

AttachImpedanceOfTreeItem( string Name )

If the Result1DComplex object is created and processed within a multiple template evaluation in the Template Based Postprocessing framework, this setting creates a separate result entry of the impedance of the specified tree item and attaches it to the result entry of the current Result1DComplex object to allow visualizing a Smith Chart.

 

GetAttachedImpedanceTreeItem string

Returns the tree item specified by AttachImpedanceOfTreeItem.

 

SetImpedanceTreeItem( string Name )

If the Result1DComplex object is created and processed within a multiple template evaluation in the Template Based Postprocessing framework, this setting stores a reference to a tree item. The data of this tree item is used as impedance data to allow visualizing a Smith Chart. The data is expected to be stored in complex data format.

 

GetImpedanceTreeItem string

Returns the tree item specified by SetImpedanceTreeItem.


Examples

Construction

An Result1DComplex object can be created as follows:

Dim result As Object

Set result = Result1DComplex("")

 

This will create an empty object. Alternatively, a filename of a complex .sig-file can be given as a parameter, then the object loads the data from the .sig-file (see Examples).


This example creates an empty object, fills it with data and adds it to the ResultTree.

 

Dim result As Object

Set result = Result1DComplex("")

With result

    .AppendXY(1,1,1)

    .AppendXY(2,2,1)

    .AppendXY(3,2,2)

    .Title("A complex curve")

    .Save("a_file_name")

    .AddToTree("1D Results\Test\complex_curve")

End With

 

This example loads the data of a complex  S-Parameter and adds it to the ResultTree.

Dim sFile As String

sFile = Resulttree.GetFileFromTreeItem("1D Results\S-Parameters\S1,1")

Dim result As Object

Set result = Result1DComplex(sFile)

result.Save("copied_s11")

result.AddToTree("1D Results\Copied Data\S1,1")

 

This example links two objects via the command SetReferenceImpedanceLink.

Dim refImp As Object

Set refImp = Result1DComplex("")

refImp.Appendxy(1,50,0)

refImp.Save("refimp_name.sig")

refImp.AddToTree("1D Results\Data\result-ref-imp")

 

Dim result As Object

Set result = Result1DComplex("")

result.Appendxy(1,0.4,0.6)

result.Save("result_name.sig")

result.SetReferenceImpedanceLink("1D Results\Data\result-ref-imp")

result.AddToTree("1D Results\Data\result")